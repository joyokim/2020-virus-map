{"version":3,"sources":["Map.js","App.js","serviceWorker.js","index.js"],"names":["WuhanPosition","historyData","renderCount","renderingStat","VirusMap","props","state","data","nationIndex","handleRenderData","bind","fetch","then","response","json","setState","index","this","length","i","push","controlRender","stopRenderHistory","renderData","setTimeout","console","log","alert","handleHistoryData","className","href","onClick","startToRenderHistory","map","item","key","handleFocusNation","Map","noWrap","scrollWheelZoom","maxZoom","center","zoom","TileLayer","url","subdomains","attribution","sources","Marker","position","Popup","CircleMarker","color","fillColor","fillOpacity","radius","Component","App","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"qVAKMA,EAAgB,CAAC,SAAU,WAC7BC,EAAc,GACdC,EAAc,EACdC,GAAgB,EA0HLC,E,YArHb,WAAYC,GAAQ,IAAD,8BACjB,4CAAMA,KACDC,MAAQ,CACXC,KAAM,KACNC,YAAa,GAEf,EAAKC,iBAAmB,EAAKA,iBAAiBC,KAAtB,gBANP,E,iFASE,IAAD,OAElBC,MADoC,6DAEjCC,MAAK,SAAAC,GAAQ,OAAIA,EAASC,UAC1BF,MAAK,SAAAL,GAAI,OAAI,EAAKQ,SAAS,CAAER,c,wFAOfS,GACjBC,KAAKF,SAAS,CACZP,YAAaQ,M,0CAOf,GADAb,GAAgB,EACW,IAAvBF,EAAYiB,OAAc,CAC5B,IAAK,IAAIC,EAAI,EAAGA,EAAI,GAAIA,IAAK,CAE3BR,MADoC,2EAA4EQ,EAAG,SAEhHP,MAAK,SAAAC,GAAQ,OAAIA,EAASC,UAC1BF,MAAK,SAAAL,GAAI,OAAIN,EAAYmB,KAAKb,MAEnCU,KAAKR,wBAELQ,KAAKR,qB,yCAKJP,EAAc,GACfe,KAAKI,gBAELJ,KAAKK,sB,sCAKP,IAAIC,EAAatB,EAAYC,GAC7Be,KAAKF,SAAS,CAAER,KAAMgB,IAAc,WAClCC,WAAW,WACTC,QAAQC,IAAKxB,GACbA,GAA4B,EAC5Be,KAAKR,oBACLC,KAAKO,MAAO,U,0CAKhBd,GAAgB,EAChBD,EAAc,I,6CAId,IAAsB,IAAlBC,EAIF,OADAwB,MAAM,sBACC,KAHPV,KAAKW,sB,+BAOA,IAAD,OACJ,OAAGX,KAAKX,MAAMC,KAEV,6BAEE,yBAAKsB,UAAU,QACb,8LACA,+CAAgBZ,KAAKX,MAAMC,KAAX,gBAAhB,IAAoD,uBAAGuB,KAAK,IAAIC,QAAU,kBAAM,EAAKC,yBAAjC,6BACpD,6DACGf,KAAKX,MAAMC,KAAKA,KAAK0B,KAAI,SAACC,EAAMC,GAAP,OACxB,uBAAGL,KAAK,IAAIK,IAAKA,EAAKJ,QAAS,kBAAM,EAAKK,kBAAkBD,KAAOD,EAAI,aAK7E,kBAACG,EAAA,EAAD,CAAKC,QAAQ,EAAOC,iBAAiB,EAAMC,QAAQ,KAAKX,UAAU,gBAAgBY,OAAQzC,EAAe0C,KAAM,GAC7G,kBAACC,EAAA,EAAD,CACEL,QAAQ,EACRM,IAAI,kGACJC,WAAW,OACXC,YAAY,uDAGb7B,KAAKX,MAAMC,KAAKA,KAAKU,KAAKX,MAAME,aAAauC,QAAQd,KAAK,SAACC,EAAMC,GAAP,OACzD,kBAACa,EAAA,EAAD,CAAQb,IAAKA,EAAKc,SAAUf,EAAI,UAC9B,kBAACgB,EAAA,EAAD,SAAShB,EAAI,SAAb,oGAA4CA,EAAI,eAAhD,SAIHjB,KAAKX,MAAMC,KAAKA,KAAKU,KAAKX,MAAME,aAAauC,QAAQd,KAAK,SAACC,EAAMC,GAAP,OACzD,kBAACgB,EAAA,EAAD,CAAchB,IAAKA,EAAKiB,MAASlB,EAAI,eAAsB,MAAQ,SAAYmB,UAAanB,EAAI,eAAqB,OAAS,UAAYoB,YAAY,MAAMC,OAAWrB,EAAI,eAAqB,GAAM,GAAKA,EAAI,eAAuBO,OAAQP,EAAI,gBAQrP,S,GAnHUsB,aCFRC,MALf,WAEE,OADqB,kBAAC,EAAD,OCOHC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD6H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMzD,MAAK,SAAA0D,GACjCA,EAAaC,kB","file":"static/js/main.65a264ea.chunk.js","sourcesContent":["import React ,  { Component } from 'react'\n// import { render } from 'react-dom'\nimport { Map, Marker, Popup, CircleMarker, TileLayer } from 'react-leaflet'\n// import ReactList from 'react-list';\n\nconst WuhanPosition = [30.58333, 114.26667]\nvar historyData = [] // try to render log  \nvar renderCount = 0;\nvar renderingStat = false;\nconst ENV = \"dis\" // dis   \n\nclass VirusMap extends Component {\n\n  constructor(props) {\n    super(props);\n    this.state = {\n      data: null,\n      nationIndex: 0\n    };\n    this.handleRenderData = this.handleRenderData.bind(this);\n  }\n\n  componentDidMount() {\n    const sourceUrl = (ENV === \"dis\") ? \"https://lbj96347.github.io/2020-virus-map/virus-data.json\" : \"http://localhost:8000/virus-data.json\" \n    fetch(sourceUrl)\n      .then(response => response.json())\n      .then(data => this.setState({ data }));\n  }\n\n  componentWillUnmount() {\n\n  }\n\n  handleFocusNation (index){\n    this.setState({\n      nationIndex: index\n    })\n  }\n\n  \n  handleHistoryData(){\n    renderingStat = true\n    if( historyData.length === 0 ){\n      for( var i = 0; i < 14; i++ ){\n        const sourceUrl = (ENV === \"dis\") ? \"https://lbj96347.github.io/2020-virus-map/virus-data-history/virus-data-\"+ i +\".json\" : \"http://localhost:8000/virus-data-history/virus-data-\"+ i +\".json\" \n        fetch(sourceUrl)\n          .then(response => response.json())\n          .then(data => historyData.push(data));\n      }\n      this.handleRenderData()\n    }else{\n      this.handleRenderData()\n    }\n  }\n\n  handleRenderData(){\n    if(renderCount < 14){\n      this.controlRender()\n    }else{\n      this.stopRenderHistory()\n    }\n  }\n\n  controlRender(){\n    var renderData = historyData[renderCount] \n    this.setState({ data: renderData }, function(){\n      setTimeout(function (){\n        console.log( renderCount );\n        renderCount = renderCount + 1\n        this.handleRenderData()\n      }.bind(this), 2000);\n    })\n  }\n\n  stopRenderHistory(){\n    renderingStat = false\n    renderCount = 0\n  }\n\n  startToRenderHistory(){\n    if( renderingStat === false ){\n      this.handleHistoryData()\n    }else{\n      alert(\"播放中\")\n      return null \n    }\n  }\n\n  render(){\n      if(this.state.data){\n        return  (\n          <div>\n\n            <div className=\"item\">\n              <p>新型冠状病毒地图 - 数据来源央视新闻或者地方卫生部门网站</p>\n              <p>Last update：{this.state.data[\"updateTimestamp\"]} <a href=\"#\" onClick={ () => this.startToRenderHistory() }>播放历史</a></p>\n              <p>国家/地区：\n                {this.state.data.data.map((item, key) => \n                  <a href=\"#\" key={key} onClick={() => this.handleFocusNation(key)}>{item[\"nation\"]}</a>  \n                )} \n              </p>\n            </div>\n\n            <Map noWrap={true}  scrollWheelZoom={true} maxZoom=\"18\" className=\"map-container\" center={WuhanPosition} zoom={5}>\n              <TileLayer\n                noWrap={true} \n                url=\"http://webrd0{s}.is.autonavi.com/appmaptile?lang=zh_cn&size=1&scale=1&style=8&x={x}&y={y}&z={z}\"\n                subdomains=\"1234\"\n                attribution=\"&copy; <a href=&quot;http://osm.org/copyright&quot;>Mapbox</a>\"\n              />\n\n              {this.state.data.data[this.state.nationIndex].sources.map( (item, key) => \n                <Marker key={key} position={item[\"position\"]}>\n                  <Popup> {item[\"cityName\"]} 新型冠状病毒感染个案（含怀疑）：{item[\"confirmedCount\"]} </Popup>\n                </Marker>\n              )}\n\n              {this.state.data.data[this.state.nationIndex].sources.map( (item, key) => \n                <CircleMarker key={key} color={ (item[\"confirmedCount\"] ?  \"red\" : \"yellow\") } fillColor={ (item[\"confirmedCount\"] ? \"#f03\" : \"#ffcf00\")} fillOpacity=\"0.5\" radius={ ((item[\"confirmedCount\"] > 20) ? 20 : item[\"confirmedCount\"]) }  center={item[\"position\"]}>\n                </CircleMarker>\n              )}\n            </Map>\n\n          </div>\n        );\n      }\n      return null;\n    }\n}\n\nexport default VirusMap;\n","import React from 'react';\nimport './App.css';\nimport Map from './Map';\n\nfunction App() {\n  const MapContainer = <Map />;\n  return MapContainer;\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n// ReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}